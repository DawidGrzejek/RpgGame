// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RpgGame.Infrastructure.Persistence.EFCore;

#nullable disable

namespace RpgGame.Infrastructure.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RpgGame")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RpgGame.Domain.Events.Base.StoredEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uuid")
                        .HasColumnName("aggregate_id");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aggregate_type");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("event_data");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("AggregateId")
                        .HasDatabaseName("ix_events_aggregate_id");

                    b.HasIndex("EventType")
                        .HasDatabaseName("ix_events_event_type");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_events_timestamp");

                    b.HasIndex("AggregateId", "Timestamp")
                        .HasDatabaseName("ix_events_aggregate_id_timestamp");

                    b.HasIndex("AggregateId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_events_aggregate_id_version");

                    b.ToTable("events", "RpgGame");
                });

            modelBuilder.Entity("RpgGame.Infrastructure.Persistence.EFCore.GameSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrentLocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("current_location_name");

                    b.Property<int>("PlayTime")
                        .HasColumnType("integer")
                        .HasColumnName("play_time");

                    b.Property<string>("PlayerCharacterJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("player_character_json");

                    b.Property<string>("SaveName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("save_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_game_saves");

                    b.HasIndex("SaveName")
                        .IsUnique()
                        .HasDatabaseName("ix_game_saves_save_name");

                    b.ToTable("game_saves", "RpgGame");
                });
#pragma warning restore 612, 618
        }
    }
}
